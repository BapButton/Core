@page "/"
@namespace BapWeb.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
	Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>Bap</title>
	<base href="~/" />
	<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
	<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
	<link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
	<link href="css/site.css" rel="stylesheet" />
	<link href="BapWeb.styles.css" rel="stylesheet" />

</head>
<body>
	<component type="typeof(App)" render-mode="ServerPrerendered" />

	<div id="blazor-error-ui">
		<environment include="Staging,Production">
			An error has occurred. This application may no longer respond until reloaded.
		</environment>
		<environment include="Development">
			An unhandled exception has occurred. See browser dev tools for details.
		</environment>
		<a href="" class="reload">Reload</a>
		<a class="dismiss">🗙</a>
	</div>
	<script src="_content/MudBlazor/MudBlazor.min.js"></script>
	<script src="_framework/blazor.server.js"></script>
	<script>
		// Wait until a 'reload' button appears
		new MutationObserver((mutations, observer) => {
			if (document.querySelector('#components-reconnect-modal h5 a')) {
				// Now every 10 seconds, see if the server appears to be back, and if so, reload
				async function attemptReload() {
					await fetch(''); // Check the server really is back
					location.reload();
				}
				observer.disconnect();
				attemptReload();
				setInterval(attemptReload, 10000);
			}
		}).observe(document.body, { childList: true, subtree: true });
	</script>
	<script>

		window.PlayAudioFile = function(src)
		{
			var aplayerName = src.replaceAll('/','_').replaceAll('.','_');
			var audio = document.getElementById(aplayerName);
			if(audio === undefined || audio === null)
			{
					var audio = document.createElement('audio');
					audio.id = aplayerName;
					audio.src = src;
					audio.type = 'audio/mpeg';
					document.body.appendChild(audio);
			}
			console.log("Audio Stats");
			console.log(audio.paused);
			console.log(audio.currentTime);
			console.log(audio.ended);
			if (!audio.paused && audio.currentTime > 0 && !audio.ended)
			{
				 console.log("Reset current Time");
				audio.currentTime = 0;
			}
			if (audio.paused && audio.currentTime > 0)
			{
				 console.log("Reset current Time because it is paused");
				audio.currentTime = 0;
				audio.play();
			}
			else
			{
				audio.play();
				}

		}
		window.StopAllAudio = function()
		{
			var element = document.getElementsByTagName("audio");
			for (index = element.length - 1; index >= 0; index--) {
					if(element.id !== 'audioPlayer')
					{
					   var audio = element[index];
					   if (!audio.paused && audio.currentTime > 0 && !audio.ended)
						{
							audio.pause();
						}
					}

				}

		}
		window.ClearAudio = function () {
				var element = document.getElementsByTagName("audio");
				let index = 0;

				for (index = element.length - 1; index >= 0; index--) {
					if(element.id !== 'audioPlayer')
					{
						element[index].parentNode.removeChild(element[index]);
					}

				}

		}
	</script>

</body>
</html>
